# = damaged
. = operational
? = # | .
Followed by list of the number of # in each group
Groups of # are always separated by at least one .

I guess whenever you hit a ? you must branch and evaluate all possible sub-solutions from that position to end.
	i.e., evaluate for . and for #.
Could brute-force by simply producing an exhaustive list of all possible combinations, then count how many satisfy the criterion.
Might be too slow...try it on the sample input.

Part 2:

Uh this is definitely going to take too long using current approach...
Find out exactly how long on sample input.
Yeah, way too slow.

The list of group sizes is the pattern we have to match. Turn it into a regex.
	No, NFA.
Given N1, N2, ... Nn group sizes the pattern is
	.* #N1 .+ #N2 .+ ... #Nn .*
So e.g. 1,3,2 becomes .+#.+###.+##.+
But we don't just want to know if the input matches the pattern - we want to know exactly how many resolutions of the input match the pattern.
We just have to cache any branches we've already solved.

